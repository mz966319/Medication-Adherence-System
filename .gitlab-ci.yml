variables:
  #EDIT THE SDK AND BUILD TOOLS TO MATCH YOUR GRADLE
  ANDROID_COMPILE_SDK: "29"
  ANDROID_BUILD_TOOLS: "29.0.2"
  ANDROID_SDK_TOOLS:   "4333796"

before_script:
  # The following line is only necessary if using the docker-based runner.
  #- apk add --no-cache openssh-client
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

stages:
  - build
  - test
  - deploy

assembleDebug:
  stage: build
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
    - app/build/outputs/
  tags:
    - ugrad

debugTests:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug
  tags:
    - ugrad
    
deployJob:
  stage: deploy
  tags:
    - ugrad
  artifacts:
    paths:
      - app/build/outputs
  script:
    - chmod og-rwx ${DEPLOY_SSH_KEY}
    - scp -r -o StrictHostKeyChecking=no -i "${DEPLOY_SSH_KEY}" app/build/outputs/apk/debug/app-debug.apk "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/App-${CI_PROJECT_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}.apk"
